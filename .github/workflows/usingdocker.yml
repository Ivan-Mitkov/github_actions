name: Using_Docker
on: pull_request
jobs:
  docker-steps:
    runs-on: ubuntu-latest
    container:
      image: node:10.18.0-jessie
      # next step run without specified container so it uses 10.18.0
    steps:
      - name: log node version
        run: node -v
        # here we are using container to run this step
      - name: step with docker
      #run this container when this step executes
        uses: docker://node:12.14.1-alpine3.10
        #overright the entrypoint command using with
        with: 
        #entrypoint in github actions is path to executable
          entrypoint: '/bin/echo'
          args: 'Hello world from docker container'
      - name: Log node version
      #second step
        uses: docker://node:12.14.1-alpine3.10
        #overright the entrypoint command using with
        with: 
        #entrypoint in github actions is path to executable node-v is run in container node
          entrypoint: '/usr/local/bin/node'
          args: '-v'
          # to run script need to have access to our files so checkout
      - uses: actions/checkout@v1   
      - name: Run a script
        uses: docker://node:12.14.1-alpine3.10
        #overright the entrypoint command using with
        with: 
        #entrypoint in github actions is RELATIVE path to executable script file from the ROOT folder to run the command in terminal BEFORE commiting chmod +x script.sh if not working "git update-index --chmod +x ./script.sh"
          entrypoint: './script.sh'
          args: 'Passed Args'
      - name: send a slack message
      # https://hub.docker.com/r/technosophos/slack-notify/
        uses: docker://technosophos/slack-notify
        env:
          # The Slack-assigned webhook
          SLACK_WEBHOOK: ${{secrets.SLACK_WEBHOOK}}
          SLACK_MESSAGE: "Today is a fine day"
           
  node-docker:
    runs-on: ubuntu-latest
    container: node:13.5.0-alpine3.10
    steps:
      - name: Log node version
        # sibling container
        run: |
          node -v
          cat /etc/os-release
  docker-services: 
    runs-on: ubuntu-latest
    services:
      app: 
        image: alialaa17/node-api
        ports:
          - 3001:3000
      mongo:
        image: mongo
        ports:
          - "27017:27017"
    steps:
      - name: Post a User
        run: "curl -X POST http://localhost:3001/api/user -H 'Content-Type: application/json' -d '{\"username\": \"hello\",\"address\": \"dwded\"}'"
      - name: Get Users
        run: curl localhost:3001/api/users